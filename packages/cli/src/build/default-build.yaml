jobs:
  build:
    before: pull
    during: buildPackage
    after: commitAndPush

steps:
  build:
    - name: 'npm install'
      enableOption: 'install'
      run: 'npm install'
    - name: 'npm update'
      enableOption: 'update'
      run: 'npm update'
    - name: 'npm audit fix'
      enableOption: 'audit'
      run: 'npm audit fix'
    - name: 'increment version'
      enableOption: 'publish'
      run: "npm version $(bilt next-version .) --allow-same-version --no-git-tag-version"
    - name: 'npm run build'
      enableOption: 'build'
      run: 'npm run build --if-present'
    - name: 'test'
      run: 'npm run test --if-present'
    - name: 'npm publish'
      enableOption: 'publish'
      run: 'npm publish --access=$ACCESS'
      condition: |
        async ({directory}) => {
          const packageJson = JSON.parse(await require('fs').promises.readFile(directory + "/package.json"))

          return !packageJson.private
        }
      env:
        ACCESS: |
          async ({directory}) => {
            const packageJson = JSON.parse(await require('fs').promises.readFile(directory + "/package.json"))

            const isPublic = (packageJson.publishConfig || {}).access !== 'restricted'

            return isPublic ? 'public' : 'restricted'
          }
      - name: 'stage files'
        enableOption: ['stage', 'git']
        run: 'git add .'
    pull:
      - name: 'git pull'
        enableOption: ['pull', 'git']
        run: 'git pull --rebase --autostash'
    commitAndPush:
      - name: 'git commit'
        enableOption: ['commit', 'git']
        parameterOption: 'message'
        run: 'git commit --allow-empty -m $BILT_OPTION_MESSAGE'
      - name: 'git pull (again)'
        enableOption: ['pull', 'git']
        run: 'git pull --rebase --autostash'
      - name: 'git push'
        enableOption: ['push', 'git']
        run: 'git push'
